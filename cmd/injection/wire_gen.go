// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package injection

import (
	"github.com/gin-gonic/gin"
	"github.com/go-playground/universal-translator"
	"github.com/go-playground/validator/v10"
	"github.com/google/wire"
	"github.com/midtrans/midtrans-go/snap"
	"github.com/spf13/viper"
	"go-takemikazuchi-api/configs"
	"go-takemikazuchi-api/internal/category"
	"go-takemikazuchi-api/internal/job"
	"go-takemikazuchi-api/internal/job_application"
	"go-takemikazuchi-api/internal/job_resource"
	"go-takemikazuchi-api/internal/routes"
	"go-takemikazuchi-api/internal/storage"
	"go-takemikazuchi-api/internal/transaction"
	"go-takemikazuchi-api/internal/user"
	"go-takemikazuchi-api/internal/user_address"
	"go-takemikazuchi-api/internal/worker"
	"go-takemikazuchi-api/internal/worker_resource"
	"go-takemikazuchi-api/internal/worker_wallet"
	"googlemaps.github.io/maps"
	"gorm.io/gorm"
)

// Injectors from injector.go:

// wire.go
func InitializeRoutes(ginRouterGroup *gin.RouterGroup, dbConnection *gorm.DB, validatorInstance *validator.Validate, engTranslator ut.Translator, viperConfig *viper.Viper, mailerService *configs.MailerService, identityProvider *configs.IdentityProvider, googleMapsClient *maps.Client, midtransClient *snap.Client) (*routes.ApplicationRoutes, error) {
	repositoryImpl := user.NewRepository()
	serviceImpl := user.NewService(repositoryImpl, dbConnection, validatorInstance, engTranslator, mailerService, identityProvider, viperConfig)
	handler := user.NewHandler(serviceImpl, validatorInstance)
	authenticationRoutes := ProvideAuthenticationRoutes(ginRouterGroup, handler)
	categoryRepositoryImpl := category.NewRepository()
	categoryServiceImpl := category.NewService(categoryRepositoryImpl, dbConnection, validatorInstance, engTranslator)
	categoryHandler := category.NewHandler(categoryServiceImpl)
	jobRepositoryImpl := job.NewRepository()
	job_resourceRepositoryImpl := job_resource.NewRepository()
	fileStorage := storage.ProvideFileStorage(viperConfig)
	user_addressRepositoryImpl := user_address.NewUserAddressRepository()
	jobServiceImpl := job.NewService(validatorInstance, jobRepositoryImpl, repositoryImpl, categoryRepositoryImpl, job_resourceRepositoryImpl, dbConnection, engTranslator, fileStorage, googleMapsClient, user_addressRepositoryImpl)
	jobHandler := job.NewHandler(jobServiceImpl)
	job_applicationRepositoryImpl := job_application.NewRepository()
	job_applicationServiceImpl := job_application.NewService(validatorInstance, engTranslator, job_applicationRepositoryImpl, dbConnection, jobRepositoryImpl, repositoryImpl)
	job_applicationHandler := job_application.NewHandler(job_applicationServiceImpl)
	workerRepositoryImpl := worker.NewRepository()
	worker_walletRepositoryImpl := worker_wallet.NewRepository()
	worker_resourceRepositoryImpl := worker_resource.NewRepository()
	workerServiceImpl := worker.NewService(workerRepositoryImpl, validatorInstance, engTranslator, dbConnection, repositoryImpl, worker_walletRepositoryImpl, worker_resourceRepositoryImpl, fileStorage)
	workerHandler := worker.NewHandler(workerServiceImpl)
	transactionRepositoryImpl := transaction.NewRepository()
	transactionServiceImpl := transaction.NewService(validatorInstance, engTranslator, dbConnection, midtransClient, jobRepositoryImpl, transactionRepositoryImpl, job_applicationRepositoryImpl)
	transactionHandler := transaction.NewHandler(transactionServiceImpl)
	protectedRoutes := ProvideProtectedRoutes(ginRouterGroup, categoryHandler, jobHandler, job_applicationHandler, workerHandler, transactionHandler, viperConfig)
	applicationRoutes := &routes.ApplicationRoutes{
		AuthenticationRoutes: authenticationRoutes,
		ProtectedRoutes:      protectedRoutes,
	}
	return applicationRoutes, nil
}

// injector.go:

var routeSet = wire.NewSet(
	ProvideAuthenticationRoutes,
	ProvideProtectedRoutes,
)

func ProvideAuthenticationRoutes(routerGroup *gin.RouterGroup, userController user.Controller) *routes.AuthenticationRoutes {
	authenticationRoutes := routes.NewAuthenticationRoutes(routerGroup, userController)
	authenticationRoutes.Setup()
	return authenticationRoutes
}

func ProvideProtectedRoutes(routerGroup *gin.RouterGroup,
	categoryController category.Controller,
	jobController job.Controller,
	jobApplicationController job_application.Controller,
	workerController worker.Controller,
	transactionController transaction.Controller,
	viperConfig *viper.Viper) *routes.ProtectedRoutes {
	protectedRoutes := routes.NewProtectedRoutes(routerGroup, categoryController, jobController, viperConfig, workerController, transactionController, jobApplicationController)
	protectedRoutes.Setup()
	return protectedRoutes
}

var userSet = wire.NewSet(user.NewRepository, wire.Bind(new(user.Repository), new(*user.RepositoryImpl)), user.NewService, wire.Bind(new(user.Service), new(*user.ServiceImpl)), user.NewHandler, wire.Bind(new(user.Controller), new(*user.Handler)))

var userAddressSet = wire.NewSet(user_address.NewUserAddressRepository, wire.Bind(new(user_address.Repository), new(*user_address.RepositoryImpl)))

var categorySet = wire.NewSet(category.NewRepository, wire.Bind(new(category.Repository), new(*category.RepositoryImpl)), category.NewService, wire.Bind(new(category.Service), new(*category.ServiceImpl)), category.NewHandler, wire.Bind(new(category.Controller), new(*category.Handler)))

var jobSet = wire.NewSet(job.NewRepository, wire.Bind(new(job.Repository), new(*job.RepositoryImpl)), job.NewService, wire.Bind(new(job.Service), new(*job.ServiceImpl)), job.NewHandler, wire.Bind(new(job.Controller), new(*job.Handler)))

var workerSet = wire.NewSet(worker.NewRepository, wire.Bind(new(worker.Repository), new(*worker.RepositoryImpl)), worker.NewService, wire.Bind(new(worker.Service), new(*worker.ServiceImpl)), worker.NewHandler, wire.Bind(new(worker.Controller), new(*worker.Handler)))

var workerResourceSet = wire.NewSet(worker_resource.NewRepository, wire.Bind(new(worker_resource.Repository), new(*worker_resource.RepositoryImpl)))

var workerWalletSet = wire.NewSet(worker_wallet.NewRepository, wire.Bind(new(worker_wallet.Repository), new(*worker_wallet.RepositoryImpl)))

var jobApplicationSet = wire.NewSet(job_application.NewRepository, wire.Bind(new(job_application.Repository), new(*job_application.RepositoryImpl)), job_application.NewService, wire.Bind(new(job_application.Service), new(*job_application.ServiceImpl)), job_application.NewHandler, wire.Bind(new(job_application.Controller), new(*job_application.Handler)))

var transactionSet = wire.NewSet(transaction.NewRepository, wire.Bind(new(transaction.Repository), new(*transaction.RepositoryImpl)), transaction.NewService, wire.Bind(new(transaction.Service), new(*transaction.ServiceImpl)), transaction.NewHandler, wire.Bind(new(transaction.Controller), new(*transaction.Handler)))

var jobResourceSet = wire.NewSet(job_resource.NewRepository, wire.Bind(new(job_resource.Repository), new(*job_resource.RepositoryImpl)))
