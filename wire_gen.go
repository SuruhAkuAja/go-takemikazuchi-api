// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/gin-gonic/gin"
	"github.com/go-playground/universal-translator"
	"github.com/go-playground/validator/v10"
	"github.com/google/wire"
	"github.com/spf13/viper"
	"go-takemikazuchi-api/config"
	"go-takemikazuchi-api/routes"
	"go-takemikazuchi-api/user"
	"gorm.io/gorm"
)

// Injectors from injector.go:

// wire.go
func InitializeRoutes(ginRouterGroup *gin.RouterGroup, dbConnection *gorm.DB, validatorInstance *validator.Validate, engTranslator ut.Translator, viperConfig *viper.Viper, mailerService *config.MailerService, identityProvider *config.IdentityProvider) (*routes.ApplicationRoutes, error) {
	repositoryImpl := user.NewRepository()
	serviceImpl := user.NewService(repositoryImpl, dbConnection, validatorInstance, engTranslator, mailerService, identityProvider, viperConfig)
	handler := user.NewHandler(serviceImpl, validatorInstance)
	authenticationRoutes := ProvideAuthenticationRoutes(ginRouterGroup, handler)
	applicationRoutes := &routes.ApplicationRoutes{
		AuthRoutes: authenticationRoutes,
	}
	return applicationRoutes, nil
}

// injector.go:

var routeSet = wire.NewSet(
	ProvideAuthenticationRoutes,
)

func ProvideAuthenticationRoutes(routerGroup *gin.RouterGroup, userController user.Controller) *routes.AuthenticationRoutes {
	authenticationRoutes := routes.NewAuthenticationRoutes(routerGroup, userController)
	authenticationRoutes.Setup()
	return authenticationRoutes
}

var userSet = wire.NewSet(user.NewRepository, wire.Bind(new(user.Repository), new(*user.RepositoryImpl)), user.NewService, wire.Bind(new(user.Service), new(*user.ServiceImpl)), user.NewHandler, wire.Bind(new(user.Controller), new(*user.Handler)))
